# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{upstream_browser_version_short}`: The
# corresponding Safari/Chrome   version, but only with its major
# version. * `{qutebrowser_version}`: The currently running qutebrowser
# version.  The default value is equal to the default user agent of
# QtWebKit/QtWebEngine, but with the `QtWebEngine/...` part removed for
# increased compatibility.  Note that the value read from JavaScript is
# always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:136.0) Gecko/20100101 Firefox/136.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Allow JavaScript to read from or write to the clipboard. With
# QtWebEngine, writing the clipboard as response to a user interaction
# is always allowed. On Qt < 6.8, the `ask` setting is equivalent to
# `none` and permission needs to be granted manually via this setting.
# Type: JSClipboardPermission
# Valid values:
#   - none: Disable access to clipboard.
#   - access: Allow reading from and writing to the clipboard.
#   - access-paste: Allow accessing the clipboard and pasting clipboard content.
#   - ask: Prompt when requested (grants 'access-paste' permission).
config.set('content.javascript.clipboard', 'none', 'https://aur.archlinux.org')

# Allow JavaScript to read from or write to the clipboard. With
# QtWebEngine, writing the clipboard as response to a user interaction
# is always allowed. On Qt < 6.8, the `ask` setting is equivalent to
# `none` and permission needs to be granted manually via this setting.
# Type: JSClipboardPermission
# Valid values:
#   - none: Disable access to clipboard.
#   - access: Allow reading from and writing to the clipboard.
#   - access-paste: Allow accessing the clipboard and pasting clipboard content.
#   - ask: Prompt when requested (grants 'access-paste' permission).
config.set('content.javascript.clipboard', 'access-paste', 'https://chatgpt.com')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/u1145h/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/u1145h/.local/share/qutebrowser/userscripts/*')

# When to show the statusbar.
# Type: String
# Valid values:
#   - always: Always show the statusbar.
#   - never: Always hide the statusbar.
#   - in-mode: Show the statusbar when in modes other than normal mode.
c.statusbar.show = 'never'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'always'

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = '#F7F3EA'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#111314'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#161819'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#F7F3EA'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = '#2B2D2D'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#F7F3EA'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#1F2121'

# Top border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#A9B665'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#A9B665'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#A9B665'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#111314'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = '#111314'

# Color gradient start for download backgrounds.
# Type: QtColor
c.colors.downloads.start.bg = '#7DAEA3'

# Color gradient end for download text.
# Type: QtColor
c.colors.downloads.stop.fg = '#111314'

# Color gradient stop for download backgrounds.
# Type: QtColor
c.colors.downloads.stop.bg = '#A9B665'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#F7F3EA'

# Background color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.bg = '#EA6962'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#111314'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = '#E78A4E'

# Font color for the matched part of hints.
# Type: QtColor
c.colors.hints.match.fg = '#EA6962'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#F7F3EA'

# Background color of an error message.
# Type: QssColor
c.colors.messages.error.bg = '#EA6962'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#F7F3EA'

# Background color of a warning message.
# Type: QssColor
c.colors.messages.warning.bg = '#E78A4E'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#F7F3EA'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#161819'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#F7F3EA'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#111314'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = '#1F2121'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#F7F3EA'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#111314'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#111314'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = '#A9B665'

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = '#F7F3EA'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#161819'

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = '#111314'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = '#f7f3ea36'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#161819'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = '#f7f3ea36'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#161819'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = '#111314'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#A9B665'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = '#111314'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#A9B665'

# Value to use for `prefers-color-scheme:` for websites. The "light"
# value is only available with QtWebEngine 5.15.2+. On older versions,
# it is the same as "auto". The "auto" value is broken on QtWebEngine
# 5.15.2 due to a Qt bug. There, it will fall back to "light"
# unconditionally.
# Type: String
# Valid values:
#   - auto: Use the system-wide color scheme setting.
#   - light: Force a light theme.
#   - dark: Force a dark theme.
c.colors.webpage.preferred_color_scheme = 'dark'

# Render all web contents using a dark theme. On QtWebEngine < 6.7, this
# setting requires a restart and does not support URL patterns, only the
# global setting is applied. Example configurations from Chromium's
# `chrome://flags`: - "With simple HSL/CIELAB/RGB-based inversion": Set
# `colors.webpage.darkmode.algorithm` accordingly, and   set
# `colors.webpage.darkmode.policy.images` to `never`.  - "With selective
# image inversion": qutebrowser default settings.
# Type: Bool
c.colors.webpage.darkmode.enabled = False

# Bindings for normal mode
config.bind('M', 'hint links spawn mpv {hint-url}')
config.bind('xb', 'config-cycle statusbar.show always never')
config.bind('xt', 'config-cycle tabs.show always never')
